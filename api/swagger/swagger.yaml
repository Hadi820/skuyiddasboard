openapi: 3.0.0
info:
  title: Hotel Management System API
  description: Comprehensive API for hotel reservation and management system
  version: 1.0.0
  contact:
    name: Hotel Management Team
    email: api@hotelmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://api.hotelmanagement.com/api
    description: Production server

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful

  # Reservation endpoints
  /reservations:
    get:
      tags:
        - Reservations
      summary: Get all reservations
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [Pending, Proses, Selesai, Batal]
        - name: gro
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
        - name: searchTerm
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'

    post:
      tags:
        - Reservations
      summary: Create new reservation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReservationDto'
      responses:
        '201':
          description: Reservation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Reservation'
                  message:
                    type: string

  /reservations/{id}:
    get:
      tags:
        - Reservations
      summary: Get reservation by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reservation details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Reservation'
        '404':
          description: Reservation not found

    put:
      tags:
        - Reservations
      summary: Update reservation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReservationDto'
      responses:
        '200':
          description: Reservation updated successfully

    delete:
      tags:
        - Reservations
      summary: Delete reservation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reservation deleted successfully

  /reservations/gro/summary:
    get:
      tags:
        - Reservations
        - Analytics
      summary: Get GRO performance summary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: GRO performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroSummary'

  # Client endpoints
  /clients:
    get:
      tags:
        - Clients
      summary: Get all clients
      security:
        - bearerAuth: []
      parameters:
        - name: searchTerm
          in: query
          schema:
            type: string
        - name: isActive
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'

    post:
      tags:
        - Clients
      summary: Create new client
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientDto'
      responses:
        '201':
          description: Client created successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: admin@hotelmanagement.com
        password:
          type: string
          format: password
          example: password123

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            token:
              type: string
            refreshToken:
              type: string
            user:
              $ref: '#/components/schemas/User'
            expiresIn:
              type: integer

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [admin, staff, gro]
        isActive:
          type: boolean

    # Reservation schemas
    Reservation:
      type: object
      properties:
        id:
          type: integer
        clientId:
          type: integer
        bookingCode:
          type: string
          example: BK-20250101-001
        bookingDate:
          type: string
          format: date
        customerName:
          type: string
        phoneNumber:
          type: string
        checkIn:
          type: string
          format: date
        checkOut:
          type: string
          format: date
        tripSchedule:
          type: string
          nullable: true
        orderDetails:
          type: string
        gro:
          type: string
        category:
          type: string
          enum: [Akomodasi, Transportasi, Trip, Kuliner, Event, Meeting, Photoshoot, Lainnya]
        finalPrice:
          type: number
          format: decimal
        customerDeposit:
          type: number
          format: decimal
        partnerDeposit:
          type: number
          format: decimal
        remainingPayment:
          type: number
          format: decimal
        basePrice:
          type: number
          format: decimal
        profit:
          type: number
          format: decimal
        status:
          type: string
          enum: [Pending, Proses, Selesai, Batal]
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateReservationDto:
      type: object
      required:
        - customerName
        - checkIn
        - checkOut
        - orderDetails
        - finalPrice
        - gro
      properties:
        customerName:
          type: string
        phoneNumber:
          type: string
        checkIn:
          type: string
          format: date
        checkOut:
          type: string
          format: date
        tripSchedule:
          type: string
        orderDetails:
          type: string
        gro:
          type: string
        category:
          type: string
          default: Akomodasi
        finalPrice:
          type: number
          format: decimal
        customerDeposit:
          type: number
          format: decimal
          default: 0
        partnerDeposit:
          type: number
          format: decimal
          default: 0
        basePrice:
          type: number
          format: decimal
          default: 0
        status:
          type: string
          enum: [Pending, Proses, Selesai, Batal]
          default: Pending
        notes:
          type: string

    UpdateReservationDto:
      type: object
      properties:
        customerName:
          type: string
        phoneNumber:
          type: string
        checkIn:
          type: string
          format: date
        checkOut:
          type: string
          format: date
        tripSchedule:
          type: string
        orderDetails:
          type: string
        gro:
          type: string
        category:
          type: string
        finalPrice:
          type: number
          format: decimal
        customerDeposit:
          type: number
          format: decimal
        partnerDeposit:
          type: number
          format: decimal
        basePrice:
          type: number
          format: decimal
        status:
          type: string
          enum: [Pending, Proses, Selesai, Batal]
        notes:
          type: string

    # Client schemas
    Client:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        notes:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateClientDto:
      type: object
      required:
        - name
        - phone
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        notes:
          type: string

    # Analytics schemas
    GroSummary:
      type: object
      properties:
        gro:
          type: string
        totalReservations:
          type: integer
        totalRevenue:
          type: number
          format: decimal
        averageRevenue:
          type: number
          format: decimal
        completedReservations:
          type: integer
        pendingReservations:
          type: integer
        processingReservations:
          type: integer
        cancelledReservations:
          type: integer
        totalCommission:
          type: number
          format: decimal
        earnedCommission:
          type: number
          format: decimal
        pendingCommission:
          type: number
          format: decimal
        completionRate:
          type: number
          format: decimal

    # Common schemas
    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string
        details:
          type: object

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Reservations
    description: Hotel reservation management
  - name: Clients
    description: Client management
  - name: Analytics
    description: Business analytics and reporting
  - name: Financial
    description: Financial management and reporting
